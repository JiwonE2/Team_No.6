{"ast":null,"code":"import _objectSpread from\"C:/reactproject/movie_app_2021/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/reactproject/movie_app_2021/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import defaultAxios from\"axios\";import{useEffect,useState}from\"react\";/*\r\n컴포넌트 최상위에서 Hook이 호출되어야만 하는 이유\r\n리액트는 Hook이 호출되는 순서에 의존하여 '특정 state가 useState 호출에 해당하는지 알 수 있다.'\r\n따라서 조건문이 중간에 삽입되면 Hook의 순서가 꼬이고 버그가 발생하게 된다.\r\n*/var useAxios=function useAxios(opts){var axiosInstance=arguments.length>1&&arguments[1]!==undefined?arguments[1]:defaultAxios;// if (!opts.url) {\n//   return;\n// }\nvar _useState=useState({loading:true,error:null,data:null}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),trigger=_useState4[0],setTrigger=_useState4[1];useEffect(function(){axiosInstance(opts).then(function(data){console.log(trigger);setState(_objectSpread(_objectSpread({},state),{},{loading:false,data:data}));}).catch(function(error){setState(_objectSpread(_objectSpread({},state),{},{loading:false,error:error}));console.log(\"useAxios Error : \".concat(error));});},[trigger]);return state;};export default useAxios;","map":{"version":3,"sources":["C:/reactproject/movie_app_2021/src/components/useAxios.js"],"names":["defaultAxios","useEffect","useState","useAxios","opts","axiosInstance","loading","error","data","state","setState","trigger","setTrigger","then","console","log","catch"],"mappings":"ySAAA,MAAOA,CAAAA,YAAP,KAAyB,OAAzB,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA;AACA;AACA;AACA;AACA,EAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,IAAD,CAAwC,IAAjCC,CAAAA,aAAiC,2DAAjBL,YAAiB,CACvD;AACA;AACA;AACA,cAA0BE,QAAQ,CAAC,CACjCI,OAAO,CAAE,IADwB,CAEjCC,KAAK,CAAE,IAF0B,CAGjCC,IAAI,CAAE,IAH2B,CAAD,CAAlC,wCAAOC,KAAP,eAAcC,QAAd,eAMA,eAA8BR,QAAQ,CAAC,CAAD,CAAtC,yCAAOS,OAAP,eAAgBC,UAAhB,eAGAX,SAAS,CAAC,UAAM,CACdI,aAAa,CAACD,IAAD,CAAb,CACGS,IADH,CACQ,SAAAL,IAAI,CAAI,CACZM,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EACAD,QAAQ,gCACHD,KADG,MAENH,OAAO,CAAE,KAFH,CAGNE,IAAI,CAAJA,IAHM,GAAR,CAKD,CARH,EASGQ,KATH,CASS,SAAAT,KAAK,CAAI,CACdG,QAAQ,gCAAMD,KAAN,MAAaH,OAAO,CAAE,KAAtB,CAA6BC,KAAK,CAALA,KAA7B,GAAR,CACAO,OAAO,CAACC,GAAR,4BAAgCR,KAAhC,GACD,CAZH,EAaD,CAdQ,CAcN,CAACI,OAAD,CAdM,CAAT,CAgBA,MAAOF,CAAAA,KAAP,CACD,CA9BD,CAgCA,cAAeN,CAAAA,QAAf","sourcesContent":["import defaultAxios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n/*\r\n컴포넌트 최상위에서 Hook이 호출되어야만 하는 이유\r\n리액트는 Hook이 호출되는 순서에 의존하여 '특정 state가 useState 호출에 해당하는지 알 수 있다.'\r\n따라서 조건문이 중간에 삽입되면 Hook의 순서가 꼬이고 버그가 발생하게 된다.\r\n*/\r\n\r\nconst useAxios = (opts, axiosInstance = defaultAxios) => {\r\n  // if (!opts.url) {\r\n  //   return;\r\n  // }\r\n  const [state, setState] = useState({\r\n    loading: true,\r\n    error: null,\r\n    data: null\r\n  })\r\n\r\n  const [trigger, setTrigger] = useState(0);\r\n\r\n\r\n  useEffect(() => {\r\n    axiosInstance(opts)\r\n      .then(data => {\r\n        console.log(trigger);\r\n        setState({\r\n          ...state,\r\n          loading: false,\r\n          data\r\n        });\r\n      })\r\n      .catch(error => {\r\n        setState({ ...state, loading: false, error });\r\n        console.log(`useAxios Error : ${error}`);\r\n      });\r\n  }, [trigger]);\r\n\r\n  return state;\r\n};\r\n\r\nexport default useAxios;"]},"metadata":{},"sourceType":"module"}